{"version":3,"file":"main.js","mappings":"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","sources":["webpack://virtual-keyboard/./src/keyboard/row/row.js","webpack://virtual-keyboard/./src/keyboard/keyboard.js","webpack://virtual-keyboard/./src/index.js","webpack://virtual-keyboard/./src/title/title.js","webpack://virtual-keyboard/./src/textarea/textarea.js"],"sourcesContent":["import { getData } from \"../keyboard\";\r\n\r\nexport const updateKeyboard = (isCapsLock) => {\r\n    let btns = Array.from(document.querySelectorAll(\".btn\"));\r\n    btns.map((btn) => {\r\n        if (isCapsLock && btn.id[0] === \"K\" && btn.id[1] === \"e\") {\r\n            btn.textContent = btn.innerHTML.toUpperCase();\r\n        } else if (!isCapsLock && btn.id[0] === \"K\" && btn.id[1] === \"e\") {\r\n            btn.textContent = btn.innerHTML.toLowerCase();\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const shiftPush = async (isPush, lang) => {\r\n    let keyboard = await getData();\r\n    let data = isPush\r\n        ? lang === \"EN\"\r\n            ? keyboard.keyboardUpper\r\n            : keyboard.keyboardRuUpper\r\n        : lang === \"RU\"\r\n            ? keyboard.keyboardRu\r\n            : keyboard.keyboard;\r\n    data.map((row) => {\r\n        row.keys.map((item) => {\r\n            let btn = document.getElementById(item.id);\r\n            btn.textContent = item.key;\r\n        });\r\n    });\r\n};\r\n\r\nconst Row = (keys) => {\r\n    let row = document.createElement(\"div\");\r\n    row.className = \"row\";\r\n    keys.map((btn) => {\r\n        let button = document.createElement(\"span\");\r\n        button.className = \"btn\";\r\n        button.id = btn.id;\r\n        let btnClass = btn.id;\r\n        button.classList.add(btnClass);\r\n        button.textContent = btn.key;\r\n        row.append(button);\r\n    });\r\n    return row;\r\n};\r\n\r\nexport default Row;","import Row from \"./row/row\";\r\n\r\nexport const getData = async () => {\r\n    let response = await fetch(\"/keyboard/keyboard.json\");\r\n    let payload = await response.json();\r\n    return payload;\r\n};\r\n\r\n\r\nconst Keyboard = async () => {\r\n    let keyboard = document.createElement(\"div\");\r\n    keyboard.className = \"keyboard\";\r\n    let rows = await getData();\r\n    rows.keyboard.map((row) => {\r\n        keyboard.append(Row(row.keys));\r\n    });\r\n    return keyboard;\r\n};\r\n\r\nexport default Keyboard;","import Keyboard from \"./keyboard/keyboard\";\r\nimport { shiftPush, updateKeyboard } from \"./keyboard/row/row\";\r\nimport \"./styles/index.scss\";\r\nimport Textarea from \"./textarea/textarea\";\r\nimport Title from \"./title/title\";\r\n\r\nlet isCapsLock = false;\r\nlet lang = \"EN\";\r\nlet isShift = false;\r\n\r\nasync function createContainer() {\r\n    let div = document.createElement(\"div\");\r\n    div.className = \"container\";\r\n    div.append(Title()); // add title\r\n    div.append(Textarea()); // add textarea\r\n    let keyboard = await Keyboard();\r\n    div.append(keyboard);\r\n    document.body.append(div); // add keyboard\r\n    return;\r\n}\r\n\r\ncreateContainer();\r\n\r\ndocument.addEventListener(\"keydown\", function (event) {\r\n    const textarea = document.querySelector(\".textarea\");\r\n    const btn = Array.from(document.querySelectorAll(\".btn\"));\r\n    let curBtn = btn.find((item) => item.id === event.code);\r\n\r\n\r\n    if (curBtn.id[0] === \"K\" && curBtn.id[1] === \"e\"\r\n        || curBtn.id[0] === \"D\" && curBtn.id[1] === \"i\"\r\n        || curBtn.id === \"Backquote\" || curBtn.id === \"Minus\" || curBtn.id === \"Equal\"\r\n        || curBtn.id === \"BracketLeft\" || curBtn.id === \"BracketRight\"\r\n        || curBtn.id === \"Backslash\" || curBtn.id === \"Semicolon\" || curBtn.id === \"Quote\"\r\n        || curBtn.id === \"Comma\" || curBtn.id === \"Period\" || curBtn.id === \"Slash\") {\r\n        event.preventDefault();\r\n        textarea.value += curBtn.textContent;\r\n    }\r\n\r\n\r\n\r\n    if (curBtn.id === \"CapsLock\") {\r\n        if (!isCapsLock) {\r\n            isCapsLock = true;\r\n            curBtn.classList.add(\"active\");\r\n            updateKeyboard(isCapsLock);\r\n        } else {\r\n            isCapsLock = false;\r\n            curBtn.classList.remove(\"active\");\r\n            updateKeyboard(isCapsLock);\r\n        }\r\n    } else {\r\n        curBtn.classList.add(\"active\");\r\n    }\r\n\r\n\r\n    if (curBtn.id === \"ShiftLeft\" || curBtn.id === \"ShiftRight\") {\r\n        curBtn.classList.add(\"active\");\r\n        isCapsLock ? shiftPush(false, lang) : shiftPush(true, lang);\r\n\r\n        isShift = true;\r\n    }\r\n\r\n    if (isShift && curBtn.id === \"AltLeft\") {\r\n        if (lang === \"EN\") {\r\n            lang = \"RU\";\r\n        } else {\r\n            lang = \"EN\";\r\n        }\r\n        console.log(lang);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n});\r\n\r\ndocument.addEventListener(\"keyup\", (event) => {\r\n    const btn = Array.from(document.querySelectorAll(\".btn\"));\r\n    let curBtn = btn.find((item) => item.id === event.code);\r\n    if (curBtn.id === \"ShiftLeft\" || curBtn.id === \"ShiftRight\") {\r\n        curBtn.classList.remove(\"active\");\r\n        isCapsLock ? shiftPush(true, lang) : shiftPush(false, lang);\r\n        isShift = false;\r\n    }\r\n    if (curBtn.id !== \"CapsLock\") {\r\n        curBtn.classList.remove(\"active\");\r\n    }\r\n});\r\n\r\n\r\n","function Title() {\r\n    let title = document.createElement(\"h1\");\r\n    title.className = \"title\";\r\n    title.textContent = \"Виртуальная клавиатура\";\r\n    return title;\r\n}\r\n\r\nexport default Title;","const Textarea = () => {\r\n    let textarea = document.createElement(\"textarea\");\r\n    textarea.className = \"textarea\";\r\n    textarea.setAttribute(\"rows\", \"50\");\r\n    textarea.setAttribute(\"cols\", \"50\");\r\n   // textarea.setAttribute(\"readonly\", \"true\");\r\n    return textarea;\r\n};\r\n\r\nexport default Textarea;"],"names":["updateKeyboard","isCapsLock","Array","from","document","querySelectorAll","map","btn","id","textContent","innerHTML","toUpperCase","toLowerCase","shiftPush","async","isPush","lang","keyboard","getData","keyboardUpper","keyboardRuUpper","keyboardRu","row","keys","item","getElementById","key","response","fetch","json","createElement","className","append","button","btnClass","classList","add","isShift","div","title","textarea","setAttribute","body","createContainer","addEventListener","event","querySelector","curBtn","find","code","preventDefault","value","remove","console","log"],"sourceRoot":""}